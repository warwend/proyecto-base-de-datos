CREATE TABLE ranking (
  id_ranking SERIAL PRIMARY KEY,
  tipo_ranking VARCHAR(20)
);

CREATE TABLE ROL (
    id_rol SERIAL PRIMARY KEY,
    permisos VARCHAR(100) NOT NULL,
    nombre_rol VARCHAR(100) NOT NULL
);

CREATE TABLE USUARIO (
    id_usuario SERIAL PRIMARY KEY,
    contraseña_usuario VARCHAR(20) NOT NULL,
    email_usuario VARCHAR(20) NOT NULL,
    ubicación_usuario VARCHAR(20) NOT NULL,
    nombre_usuario VARCHAR(15) NOT NULL,
    id_rol INT,
    FOREIGN KEY (id_rol) REFERENCES rol(id_rol)
);

CREATE TABLE proceso_de_compra ( 
  boleta VARCHAR(1000) PRIMARY KEY, 
  metodo_pago VARCHAR(20) NOT NULL,
  id_usuario INT,
  FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario)
);

CREATE TABLE CARRITO(
    id_carrito SERIAL PRIMARY KEY,
    cantidad_videojuegos INT NOT NULL,
    boleta VARCHAR(1000) NOT NULL,
    id_usuario INT,
    FOREIGN KEY(boleta) REFERENCES PROCESO_DE_COMPRA(boleta),
    FOREIGN KEY(id_usuario) REFERENCES USUARIO(id_usuario)
);

CREATE TABLE VIDEOJUEGO(
    id_videojuego SERIAL PRIMARY KEY,
    url_imagen VARCHAR(20) NOT NULL,
    tipo VARCHAR(20) NOT NULL,
    stock INT,
    nombre_videojuego VARCHAR(20) NOT NULL,
    url_videojuego VARCHAR(20) NOT NULL,
    precio INT NOT NULL,
    id_carrito INT,
    FOREIGN KEY(id_carrito) REFERENCES CARRITO(id_carrito)
);

CREATE TABLE deseados (
  id_deseados SERIAL PRIMARY KEY,
  lista_de_deseados VARCHAR(200) NOT NULL,
  id_ranking INT,
  FOREIGN KEY (id_ranking) REFERENCES ranking(id_ranking)
);

CREATE TABLE VALORACION (
    id_valoracion SERIAL PRIMARY KEY,
    valoracion VARCHAR(500),
    id_ranking INT,
    FOREIGN KEY (id_ranking) REFERENCES ranking(id_ranking)
);

CREATE TABLE DESEADOSxVIDEOJUEGOS (
    id_deseados INT,
    id_videojuego INT,
    FOREIGN KEY (id_deseados) REFERENCES deseados(id_deseados),
    FOREIGN KEY (id_videojuego) REFERENCES videojuego(id_videojuego),
    UNIQUE (id_deseados, id_videojuego)
);

CREATE TABLE VALORACIONxVIDEOJUEGO (
    id_valoracion INT,
    id_videojuego INT,
    FOREIGN KEY (id_valoracion) REFERENCES valoracion(id_valoracion),
    FOREIGN KEY (id_videojuego) REFERENCES videojuego(id_videojuego)
);

CREATE TABLE USUARIOxVALORACION (
    id_usuario INT,
    id_valoracion INT,
    FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario),
    FOREIGN KEY (id_valoracion) REFERENCES valoracion(id_valoracion),
    UNIQUE (id_usuario, id_valoracion)
);

CREATE TABLE DESEADOSxUSUARIO (
    id_deseados INT,
    id_usuario INT,
    FOREIGN KEY (id_deseados) REFERENCES deseados(id_deseados),
    FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario)
);
CREATE OR REPLACE FUNCTION log_videojuego_modificaciones()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        RAISE NOTICE 'INSERT sobre videojuego: %', NEW.nombre_videojuego;
    ELSIF TG_OP = 'UPDATE' THEN
        RAISE NOTICE 'UPDATE sobre videojuego: %', NEW.nombre_videojuego;
    ELSIF TG_OP = 'DELETE' THEN
        RAISE NOTICE 'DELETE sobre videojuego: %', OLD.nombre_videojuego;
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS trg_auditoria_videojuego ON videojuego;

CREATE TRIGGER trg_auditoria_videojuego
AFTER INSERT OR UPDATE OR DELETE ON videojuego
FOR EACH ROW
EXECUTE FUNCTION log_videojuego_modificaciones();

CREATE OR REPLACE PROCEDURE actualizar_precio_tipo(tipo_juego VARCHAR, nuevo_precio INT)
LANGUAGE plpgsql
AS $$
BEGIN
    UPDATE videojuego
    SET precio = nuevo_precio
    WHERE tipo = tipo_juego;
END;
$$;

CREATE OR REPLACE PROCEDURE reporte_ventas_usuario(id_usuario INT)
LANGUAGE plpgsql
AS $$
BEGIN
    RAISE NOTICE 'Videojuegos comprados por el usuario %:', id_usuario;

    PERFORM v.nombre_videojuego
    FROM videojuego v
    JOIN carrito c ON v.id_carrito = c.id_carrito
    WHERE c.id_usuario = id_usuario;
    FOR v_nombre IN
         SELECT v.nombre_videojuego
         FROM videojuego v
         JOIN carrito c ON v.id_carrito = c.id_carrito
         WHERE c.id_usuario = id_usuario
    LOOP
        RAISE NOTICE '→ %', v_nombre.nombre_videojuego;
    END LOOP;
END;
$$;
//////////////////////////////insercion de valores//////////////////////////////////////////////////

INSERT INTO ROL VALUES (DEFAULT, 'Permisos Jefe tienda', 'Jefe Tienda');
INSERT INTO ROL VALUES (DEFAULT, 'Permisos Usuario', 'Usuario');
INSERT INTO ROL VALUES (DEFAULT, 'Permisos Administrador', 'Administrador');
INSERT INTO USUARIO VALUES (DEFAULT, '123513', 'pedro@mail.com', 'Peñalolen', 'Pedro02', 1);
INSERT INTO USUARIO VALUES (DEFAULT, '21341', 'samuel@mail.com', 'La Calera', 'Samuel10', 2);
INSERT INTO USUARIO VALUES (DEFAULT, '54113', 'eduardo@mail.com', 'Puente alto', 'Eduardo00', 3);
INSERT INTO USUARIO VALUES (DEFAULT, '8765346', 'darwin@mail.com', 'Paine', 'Darwin123', 2);
INSERT INTO USUARIO VALUES (DEFAULT, '6412913', 'benjamin@mail.com', 'Pucon', 'Benja1', 2);
INSERT INTO ranking VALUES (DEFAULT, 'Mas ventas');
INSERT INTO ranking VALUES (DEFAULT, 'Mas deseados');
INSERT INTO proceso_de_compra VALUES ('BOL001', 'Debito', 2);
INSERT INTO proceso_de_compra VALUES ('BOL002', 'Credito', 2);
INSERT INTO proceso_de_compra VALUES ('BOL003', 'Mercado Pago', 3);
INSERT INTO CARRITO VALUES (DEFAULT, 10, 'BOL001', 2);
INSERT INTO CARRITO VALUES (DEFAULT, 8, 'BOL002', 2);
INSERT INTO CARRITO VALUES (DEFAULT, 4, 'BOL003', 3);
INSERT INTO videojuego (
  url_imagen, tipo, stock, nombre_videojuego, url_videojuego, precio, id_carrito
)
VALUES
('urlimg1', 'Lucha', 11, 'Mortal Kombat', 'urlgame1', 30000, 2),
('urlimg2', 'Comida', 10, 'Overcooked', 'urlgame2', 18000, 2),
('urlimg3', 'Aventura', 20, 'Spiderman', 'urlgame3', 35000, 2);
INSERT INTO deseados VALUES (DEFAULT, 'Lista Deseados1', 2);
INSERT INTO deseados VALUES (DEFAULT, 'Lista Deseados2', 2);
INSERT INTO deseados VALUES (DEFAULT, 'Lista Deseados5', 2);
INSERT INTO VALORACION VALUES (DEFAULT, 'GOTY', 2);
INSERT INTO VALORACION VALUES (DEFAULT, 'Mas o menos el juego', 1);
INSERT INTO VALORACION VALUES (DEFAULT, 'Me gusto mucho', 2);
INSERT INTO VALORACION VALUES (DEFAULT, 'Buenísimo', 1);
INSERT INTO DESEADOSxVIDEOJUEGOS VALUES (2, 2);
INSERT INTO DESEADOSxVIDEOJUEGOS VALUES (1, 1);
INSERT INTO DESEADOSxVIDEOJUEGOS VALUES (3, 2);
INSERT INTO VALORACIONxVIDEOJUEGO VALUES (1, 1);
INSERT INTO VALORACIONxVIDEOJUEGO VALUES (2, 3);
INSERT INTO VALORACIONxVIDEOJUEGO VALUES (1, 2);
INSERT INTO VALORACIONxVIDEOJUEGO VALUES (4, 1);
INSERT INTO USUARIOxVALORACION VALUES (2, 2);
INSERT INTO USUARIOxVALORACION VALUES (1, 1);
INSERT INTO USUARIOxVALORACION VALUES (3, 1);
INSERT INTO DESEADOSxUSUARIO VALUES (1, 2);
INSERT INTO DESEADOSxUSUARIO VALUES (2, 1);
INSERT INTO DESEADOSxUSUARIO VALUES (3, 2);

//////////////////////////////pruebas del excel//////////////////////////////////////////////////

SELECT u.*, r.nombre_rol FROM usuario u JOIN rol r ON u.id_rol = r.id_rol;
SELECT * FROM usuario WHERE email_usuario IS NULL;
SELECT * FROM usuario WHERE id_rol NOT IN (SELECT id_rol FROM rol);
SELECT u.* FROM usuario u JOIN rol r ON u.id_rol = r.id_rol WHERE r.nombre_rol = 'Usuario';
SELECT * FROM videojuego WHERE stock < 0;

SELECT * FROM videojuego;
UPDATE videojuego SET precio = 42000 WHERE nombre_videojuego = 'Spiderman';
SELECT v.nombre_videojuego FROM deseadosxusuario dxu JOIN deseados d ON dxu.id_deseados = d.id_deseados JOIN deseadosxvideojuegos dxv ON d.id_deseados = dxv.id_deseados JOIN videojuego v ON dxv.id_videojuego = v.id_videojuego WHERE dxu.id_usuario = 2;
SELECT id_deseados, id_videojuego, COUNT(*) FROM deseadosxvideojuegos GROUP BY id_deseados, id_videojuego HAVING COUNT(*) > 1;
SELECT u.nombre_usuario, v.nombre_videojuego FROM deseadosxusuario dxu JOIN usuario u ON dxu.id_usuario = u.id_usuario JOIN deseados d ON dxu.id_deseados = d.id_deseados JOIN deseadosxvideojuegos dxv ON d.id_deseados = dxv.id_deseados JOIN videojuego v ON dxv.id_videojuego = v.id_videojuego;
UPDATE carrito SET cantidad_videojuegos = cantidad_videojuegos + 1 WHERE id_carrito = 1;
SELECT u.nombre_usuario, v.nombre_videojuego FROM carrito c JOIN usuario u ON c.id_usuario = u.id_usuario JOIN videojuego v ON c.id_carrito = v.id_carrito;
SELECT u.nombre_usuario, SUM(v.precio * c.cantidad_videojuegos) AS total FROM carrito c JOIN usuario u ON c.id_usuario = u.id_usuario JOIN videojuego v ON v.id_carrito = c.id_carrito GROUP BY u.nombre_usuario;
UPDATE carrito
SET cantidad_videojuegos = 
    CASE 
        WHEN cantidad_videojuegos > 0 THEN cantidad_videojuegos - 1
        ELSE 0
    END
WHERE id_carrito = 1;
SELECT * FROM videojuego WHERE stock > 0;
SELECT * FROM videojuego WHERE stock < 5;
SELECT * FROM videojuego WHERE stock = 0;
SELECT p.boleta, u.nombre_usuario, v.nombre_videojuego FROM proceso_de_compra p JOIN usuario u ON p.id_usuario = u.id_usuario JOIN carrito c ON p.boleta = c.boleta JOIN videojuego v ON c.id_carrito = v.id_carrito;
SELECT DISTINCT metodo_pago FROM proceso_de_compra;
SELECT u.nombre_usuario, v.nombre_videojuego, val.valoracion FROM usuarioxvaloracion uv JOIN usuario u ON uv.id_usuario = u.id_usuario JOIN valoracion val ON uv.id_valoracion = val.id_valoracion JOIN valoracionxvideojuego vxv ON val.id_valoracion = vxv.id_valoracion JOIN videojuego v ON vxv.id_videojuego = v.id_videojuego;
SELECT id_usuario, id_valoracion, COUNT(*) FROM usuarioxvaloracion GROUP BY id_usuario, id_valoracion HAVING COUNT(*) > 1;
SELECT v.nombre_videojuego, COUNT(*) AS valoraciones FROM valoracionxvideojuego vxv JOIN videojuego v ON vxv.id_videojuego = v.id_videojuego GROUP BY v.nombre_videojuego ORDER BY valoraciones DESC;
SELECT v.nombre_videojuego, COUNT(*) AS deseos FROM deseadosxvideojuegos dxv JOIN videojuego v ON dxv.id_videojuego = v.id_videojuego GROUP BY v.nombre_videojuego ORDER BY deseos DESC;
SELECT u.ubicación_usuario, v.nombre_videojuego FROM usuario u JOIN proceso_de_compra p ON u.id_usuario = p.id_usuario JOIN carrito c ON p.boleta = c.boleta JOIN videojuego v ON c.id_carrito = v.id_carrito;
SELECT v.nombre_videojuego, COUNT(*) AS veces FROM videojuego v GROUP BY v.nombre_videojuego ORDER BY veces DESC;
SELECT DISTINCT u.ubicación_usuario, v.nombre_videojuego FROM usuario u JOIN proceso_de_compra p ON u.id_usuario = p.id_usuario JOIN carrito c ON p.boleta = c.boleta JOIN videojuego v ON c.id_carrito = v.id_carrito;
INSERT INTO videojuego (url_imagen, tipo, stock, nombre_videojuego, url_videojuego, precio, id_carrito) VALUES ('imgx', 'RPG', 5, 'TriggerTest', 'urlx', 9999, 2);
UPDATE videojuego SET stock = stock + 1 WHERE nombre_videojuego = 'TriggerTest';
DELETE FROM videojuego WHERE nombre_videojuego = 'TriggerTest';
CALL actualizar_precio_tipo('Lucha', 15);
CALL reporte_ventas_usuario(2);
